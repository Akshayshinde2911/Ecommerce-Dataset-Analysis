-- Task 1 List all unique cities where customers are located.

SELECT DISTINCT customer_city FROM ecommerce.customers;

-- Task 2 Count the number of orders placed in 2017.

select count(order_id) from orders
where year(order_purchase_timestamp)=2017;

-- Task 3 Find the total sales per category.

select product_category,
round(sum(payment_value),2) as total_sales
from products JOIN
order_items on products.product_id=order_items.product_id
join payments on
order_items.order_id=payments.order_id
group by product_category
order by 2 desc;

-- Task 4   Calculate the percentage of orders that were paid in installments.

SELECT (sum(case
when payment_installments>=1 then true
else false
end))/count(*)*100
from payments;

-- Task 5 Count the number of customers from each state

select customer_state,count(customer_id) from customers
group by customer_state;

-- Task 6 Calculate the number of orders per month in 2018

SELECT 
    MONTHNAME(order_purchase_timestamp), COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTHNAME(order_purchase_timestamp)
ORDER BY MONTHNAME(order_purchase_timestamp);

-- Task 7 Find the average number of products per order, grouped by customer city.

with count_per_order as 
(select orders.order_id, orders.customer_id, count(order_items.order_id) as oc
from orders join order_items
on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id)

select customers.customer_city, round(avg(count_per_order.oc),2) average_orders
from customers join count_per_order
on customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders desc;

-- Task 8 Calculate the percentage of total revenue contributed by each product category. 

select products.product_category,round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) as percentage from products
join order_items on order_items.product_id=products.product_id
join payments on payments.order_id=order_items.order_id
group by products.product_category order by percentage desc;

--  Task 9 Identify the correlation between product price and the number of times a product has been purchased

select products.product_category, 
count(order_items.product_id) as order_count,
round(avg(order_items.price),2) as price
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category;

-- Task 10  Calculate the total revenue generated by each seller, and rank them by revenue.

select sellers.seller_id, sum(payments.payment_value) as revenue,
rank() over (order by sellers.seller_id desc) as rnk from sellers join order_items on
sellers.seller_id=order_items.seller_id
join payments on payments.order_id=order_items.order_id
group by sellers.seller_id
order by 3;

-- Task 11 Calculate the moving average of order values for each customer over their order history.

select customer_id, order_purchase_timestamp,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as mov_avg
from
(select orders.customer_id, orders.order_purchase_timestamp, 
payments.payment_value as payment
from payments join orders
on payments.order_id = orders.order_id) as a;

-- Task 12 Calculate the cumulative sales per month for each year.

select years, months , payment, sum(payment)
over(partition by years order by years,months) as cumulative_sales from 
(select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years, months order by years, months) as a;

-- Task 13 Calculate the year-over-year growth rate of total sales

select years, round( ((payment - lag(payment, 1) over(order by years))/
lag(payment, 1) over(order by years)) * 100,2) as YOY_Percent_Growth from
(select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years order by years)as a;

-- Task 14 Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

with a as(select customers.customer_id,min(orders.order_purchase_timestamp) as first_order from customers
join orders on customers.customer_id=orders.customer_id
GROUP BY customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) from a join orders on
a.customer_id=orders.customer_id and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) as Retention_rate
from a left join b 
on a.customer_id = b.customer_id ;

-- Task 15 Identify the top 3 customers who spent the most money in each year.

select years, customer_id, payment, RNK from(select year(orders.order_purchase_timestamp) as years, orders.customer_id, sum(payments.payment_value) as payment,
rank() over(partition by year(orders.order_purchase_timestamp) ORDER BY sum(payments.payment_value) desc) as RNK
from orders join payments on 
orders.order_id=payments.order_id group by year(orders.order_purchase_timestamp), orders.customer_id) as a where RNK <= 3;

-- End of the Project


